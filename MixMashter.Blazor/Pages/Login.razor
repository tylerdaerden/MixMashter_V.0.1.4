@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using MixMashter.Blazor.Models.Auth
@using MixMashter.Blazor.Services
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject AuthApiService AuthService
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider


<h3>Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<!-- Ajout du Context="formContext" -->
<EditForm Model="loginModel" OnValidSubmit="HandleLogin" Context="formContext">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="loginModel.Email" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>

    <div class="mb-3">
        <label>Password</label>
        <InputText type="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button class="btn btn-primary" type="submit">Login</button>
</EditForm>

@code {
    private LoginDto loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        var result = await AuthService.LoginAsync(loginModel);

        if (result == null)
        {
            errorMessage = "Email ou mot de passe invalide.";
            return;
        }

        // Sauvegarde du token JWT
        await LocalStorage.SetItemAsync("authToken", result.Token);

        // Notifier le NavMenu que l’état a changé
        if (AuthStateProvider is JwtAuthStateProvider jwtProvider)
        {
            jwtProvider.NotifyAuthChanged();
        }

        // Redirection
        Nav.NavigateTo("/");
    }
}
